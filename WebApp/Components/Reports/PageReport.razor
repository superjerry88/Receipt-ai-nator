@page "/Reports/{TaskId}"
@using Newtonsoft.Json
@implements IDisposable
@inject NavigationManager NavigationManager

<Breadcrumb>
    <BreadcrumbItem>
        <BreadcrumbLink To="/reports">Reports</BreadcrumbLink>
    </BreadcrumbItem>
    <BreadcrumbItem Active>
        <BreadcrumbLink To="#">JobTask</BreadcrumbLink>
    </BreadcrumbItem>
</Breadcrumb>

@if (ScanTask == null || TaskId.IsNullOrEmpty())
{
    <h1>No Job Found</h1>
    <Button>Go Back</Button>
}
else
{
    @if(ScanTask.IsCompleted || ScanTask.IsTerminated)
    {
        <Card Class="p-3">
            <DisplayGroup>
                @if(ScanTask.IsError)
                {
                    <Alert Color="Color.Danger" Visible>
                        <AlertMessage>Error processing: </AlertMessage>
                        <AlertDescription>@ScanTask.ErrorMessage</AlertDescription>
                    </Alert>
                }

                @if (ScanTask.IsTerminated)
                {
                    <Alert Color="Color.Danger" Visible>
                        <AlertMessage>Task Terminated </AlertMessage>
                        <AlertDescription>This is the server's fault. Please try again</AlertDescription>
                    </Alert>
                }

                <DisplayInfo Label="Completed:">
                    @if(ScanTask.IsCompleted)
                    {
                        <Badge Color="Color.Success">Yes</Badge>
                    }
                    else
                    {
                        <Badge Color="Color.Danger">No</Badge>
                    }
                </DisplayInfo>
                <DisplayInfo Label="Time Taken:">@(ScanTask.TimeTaken.TotalSeconds)s</DisplayInfo>
                @if (ScanTask.Result != null)
                {
                    <DisplayInfo Label="Tokens Consumed:">@ScanTask.Result.TokenConsumed</DisplayInfo>
                    <DisplayInfo Label="Using Free Tokens:">@(ScanTask.Result.UsingSiteToken ? "Yes" : "No")</DisplayInfo>
                    <DisplayInfo Label="Total Receipts Found in Image:">@ScanTask.Result.Receipts.Count</DisplayInfo>


                    <DisplayInfo Label="Remarks:">
                        @foreach (var remark in ScanTask.Result.Remarks)
                        {
                            <Badge Color="Color.Dark">@remark</Badge>
                            <br/>
                        }
                    </DisplayInfo>
                }
                
                
                
            </DisplayGroup>
            

            @if (ScanTask.Result != null)
            {
                @for (var index = 0; index < ScanTask.Result.Receipts.Count; index++)
                {
                
                    var currentIndex = index;
                    var receipt = ScanTask.Result.Receipts[currentIndex];
                    <div class="pb-3 w-[96%] align-middle mx-auto">
                        <Button Block Color="Color.Success" Clicked="() => GoToReceipt(currentIndex)"> View Receipt No.@(currentIndex+1) [RM @receipt.TotalPrice] </Button>
                    </div>
                
                }
            }
            
            <DisplayCollapse Header="Image">
                <div class="flex justify-center items-center pb-3">
                    <img src="@ScanTask.Image.UrlPath" alt="Preview" style="max-width: 100%; max-height: 800px;"/>
                </div>
            </DisplayCollapse>
        </Card>
    }
    else
    {
        <div class="flex flex-col justify-center items-center">
            <img src="https://walfiegif.files.wordpress.com/2023/07/out-transparent-40.gif" alt="Loading" style="width:100px;">
            <div>
                <Paragraph TextColor="TextColor.White">
                    Your Receipt is processing, this may take up to a minute, feel free to scan more receipts while waiting.
                </Paragraph>
            </div>
        </div>
       
       
    }
    
}

@code {
    [Parameter] public string TaskId { get; set; } = "";

    private ScanTask? ScanTask { get; set; }
    private string Json { get; set; } = "";

    protected override void OnInitialized()
    {
        ScanTask = RezApi.Jobs.GetJob(TaskId);
        if (ScanTask != null)
        {
            ScanTask.OnComplete += OnComplete;
            ScanTask.OnError += OnError;;
        }

        Json = JsonConvert.SerializeObject(ScanTask, Formatting.Indented);
    }

    private void OnError(object? sender, Exception e)
    {
        Console.WriteLine("ON ERROR");
        Console.WriteLine(e);
        UpdateJson();
    }

    private void OnComplete(object? sender, ScanTask task)
    {
        Console.WriteLine("ON COMPLETE");
        ScanTask = task; 
        UpdateJson();
    }

    private void UpdateJson()
    {
        Json = JsonConvert.SerializeObject(ScanTask, Formatting.Indented);
        StateHasChanged();
    }

    public void Dispose()
    {
        if (ScanTask != null)
        {
            ScanTask.OnComplete -= OnComplete;
            ScanTask.OnError -= OnError;
        }
    }

    private void GoToReceipt(int index)
    {
        NavigationManager.NavigateTo($"/Reports/{TaskId}/{index}");
    }

}

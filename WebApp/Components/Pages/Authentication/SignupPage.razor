@layout EmptyLayout
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject CurrentSession CurrentSession
@inject CookieService CookieService
@page "/signup"

<div class="text-gray-400 bg-gray-900 body-font">
    <div class="container px-5 mx-auto py-10 flex flex-wrap items-center">

        <div class="lg:w-2/4 md:w-1/2 md:pr-16 lg:pr-0 pr-0">
            <img class="max-h-20 mx-auto m-6" src="REZEIPT.png"/>
            <p class="leading-relaxed ms-4">
                A prototype of a product pitched by Daniel & Jerry.
                This is an AI & OCR receipt management system.
                </p>
        </div>

        <div class="lg:w-2/4 md:w-1/2 bg-gray-800 bg-opacity-50 rounded-lg p-8 flex flex-col md:ml-auto w-full mt-10 md:mt-0">
            <h2 class="text-white text-lg font-medium title-font mb-5">Sign Up</h2>

            <Validations Mode="ValidationMode.Auto" Model="User">


                <div class="relative mb-4">
                    <label class="leading-7 text-sm text-gray-400">Email</label>
                    <Validation >
                        <FieldBody>
                            <TextEdit Role="TextRole.Email" @bind-Text="User.Email" Class="@FieldClass">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>

                        </FieldBody>
                    </Validation>
                </div>

                <div class="relative mb-4">
                    <label class="leading-7 text-sm text-gray-400">Username</label>
                    <Validation>
                        <FieldBody>
                            <TextEdit Role="TextRole.Email" @bind-Text="User.Username" Class="@FieldClass">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>

                        </FieldBody>
                    </Validation>
                </div>

                <div class="relative mb-4">
                    <label class="leading-7 text-sm text-gray-400">Password</label>
                    <Validation>
                        <FieldBody>
                            <TextEdit Role="TextRole.Password" @bind-Text="User.Password" Class="@FieldClass">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>

                        </FieldBody>
                    </Validation>
                </div>

                <div class="relative mb-4">
                    <label class="leading-7 text-sm text-gray-400">Repeat Password</label>
                    <Validation>
                        <FieldBody>
                            <TextEdit Role="TextRole.Password" @bind-Text="User.PasswordConfirm" Class="@FieldClass">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>

                        </FieldBody>
                    </Validation>
                </div>
            </Validations>

            <button class="text-white bg-indigo-500 border-0 py-2 px-8 focus:outline-none hover:bg-indigo-600 rounded text-lg" @onclick="Signup">Sign up</button>
            <p class="text-xs mt-3">Login <Link href="/login">Here</Link></p>
        </div>

    </div>
</div>



@code {
    private UserSignUp User { get; set; }  = new UserSignUp();

    private string? PasswordSameText { get; set; }
    private TextColor PasswordSameColor { get; set; } = TextColor.Default;

    private bool ValidUsername { get; set; } = true;
    private bool ValidEmail { get; set; } = true;

    private bool MatchingPassword { get; set; } = true;
    private bool FailedSignup { get; set; } = false;
    private string ValidityClass => $"{(!MatchingPassword ? "dark:border-red-500 dark:focus:border-red-700 dark:focus:ring-red-500" : "dark:border-green-500 dark:focus:border-green-700 dark:focus:ring-green-500")}";

    private string FieldClass => "w-full bg-gray-600 bg-opacity-20 focus:bg-transparent focus:ring-2 focus:ring-indigo-900 rounded border border-gray-600 focus:border-indigo-500 text-base outline-none text-gray-100 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out";

    private async void Signup()
    {
        ValidUsername = await User.ValidateUsername();
        ValidEmail = await User.ValidateEmail();
        if(ValidEmail && ValidUsername && User.MatchingPassword())
        {
            var actualUser = await User.Signup();
            await CookieService.SetCookie(RezApi.Jwt.Generate(actualUser));
            NavigationManager.NavigateTo("/welcome");
            Console.WriteLine("Signup success");
        }
        else
        {
            FailedSignup = true;
            Console.WriteLine("FAILED TO SIGNUP");
            await InvokeAsync(StateHasChanged);
        }
    }

    private void BackToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }

    private void CheckSame(string password)
    {
        User.PasswordConfirm = password;
        MatchingPassword = User.MatchingPassword();
        if(MatchingPassword)
        {
            PasswordSameText = "Passwords match.";
            PasswordSameColor = TextColor.Success;
        }
        else
        {
            PasswordSameText = "Passwords do not match!";
            PasswordSameColor = TextColor.Danger;
        }
    }
}

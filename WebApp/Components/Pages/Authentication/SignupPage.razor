@layout EmptyLayout
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject CurrentSession CurrentSession
@inject CookieService CookieService
@page "/signup"

@* Logo *@
<div class="pt-[5%]">
    <div class="bg-slate-700 h-20 rounded-xl flex flex-col justify-center">
        <p class="text-white m-auto">Logo</p>
    </div>
</div>

@* "Card" for Input Fields *@
<div class="pt-[5%]">
    <div class="bg-slate-700 rounded-lg border-gray-600 p-3 shadow-md border">

        @* Invisible Alert *@
        @if (FailedSignup)
        {
            <Alert Color="Color.Danger" Visible>
                <AlertMessage>Error!</AlertMessage>
                <AlertDescription>Signup Failed. Your username and email may have been already taken (or are empty)!</AlertDescription>
            </Alert>
        }

        @* Input Fields *@
        <Field Class="mb-5">
            <FieldLabel Class="mb-1">Email</FieldLabel>
            <TextEdit Role="TextRole.Email" @bind-Text="User.Email">
            </TextEdit>
        </Field>

        <Field Class="mb-5">
            <FieldLabel Class="mb-1">Username</FieldLabel>
            <TextEdit @bind-Text="User.Username">
            </TextEdit>
        </Field>

        <Field Class="mb-5">
            <FieldLabel Class="mb-1">Password</FieldLabel>
            <TextEdit Role="TextRole.Password" @bind-Text="User.Password" Class="@ValidityClass">
            </TextEdit>
        </Field>

        <Field>
            <FieldLabel Class="mb-1">Repeat Password</FieldLabel>
            <TextEdit Role="TextRole.Password" Text="@User.PasswordConfirm" TextChanged="CheckSame" Class="@ValidityClass">
                <FieldHelp>
                    <Text TextColor="@PasswordSameColor">@PasswordSameText</Text>
                </FieldHelp>
            </TextEdit>
        </Field>

        <div class="grid grid-cols-2 justify-items-center">
            <Button Clicked="Signup">
                Sign Up
            </Button>

            <Button Clicked="BackToLogin">
                Back to Login
            </Button>
        </div>

    </div>
</div>


    @code {
    private UserSignUp User { get; set; }  = new UserSignUp();

    private string? PasswordSameText { get; set; }
    private TextColor PasswordSameColor { get; set; } = TextColor.Default;

    private bool ValidUsername { get; set; } = true;
    private bool ValidEmail { get; set; } = true;

    private bool MatchingPassword { get; set; } = true;
    private bool FailedSignup { get; set; } = false;
    private string ValidityClass => $"{(!MatchingPassword ? "dark:border-red-500 dark:focus:border-red-700 dark:focus:ring-red-500" : "dark:border-green-500 dark:focus:border-green-700 dark:focus:ring-green-500")}";

    private async void Signup()
    {
        ValidUsername = await User.ValidateUsername();
        ValidEmail = await User.ValidateEmail();
        if(ValidEmail && ValidUsername && User.MatchingPassword())
        {
            var actualUser = await User.Signup();
            await CookieService.SetCookie(RezApi.Jwt.Generate(actualUser));
            NavigationManager.NavigateTo("/welcome");
            Console.WriteLine("Signup success");
        }
        else
        {
            FailedSignup = true;
            Console.WriteLine("FAILED TO SIGNUP");
            await InvokeAsync(StateHasChanged);
        }
    }

    private void BackToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }

    private void CheckSame(string password)
    {
        User.PasswordConfirm = password;
        MatchingPassword = User.MatchingPassword();
        if(MatchingPassword)
        {
            PasswordSameText = "Passwords match.";
            PasswordSameColor = TextColor.Success;
        }
        else
        {
            PasswordSameText = "Passwords do not match!";
            PasswordSameColor = TextColor.Danger;
        }
    }
}

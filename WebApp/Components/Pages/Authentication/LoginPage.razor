@page "/login"
@layout EmptyLayout
@inject CurrentSession CurrentSession
@inject CookieService CookieService
@inject NavigationManager NavigationManager

@if (FailedLogin)
{
    <Alert Color="Color.Danger" Visible>
        <AlertMessage>Error!</AlertMessage>
        <AlertDescription>Incorrect Username or Password.</AlertDescription>
    </Alert>
}

<div class="text-gray-400 bg-gray-900 body-font">
    <div class="container px-5 mx-auto py-10 flex flex-wrap items-center">

        <div class="lg:w-2/4 md:w-1/2 md:pr-16 lg:pr-0 pr-0">
            <img class="max-h-20 mx-auto m-6" src="REZEIPT.png" />
            <p class="leading-relaxed ms-4">
                A hackathon project by team A. 
                This is an AI & OCR receipt management system.
            </p>
        </div>

        <div class="lg:w-2/4 md:w-1/2 bg-gray-800 bg-opacity-50 rounded-lg p-8 flex flex-col md:ml-auto w-full mt-10 md:mt-0">
            <h2 class="text-white text-lg font-medium title-font mb-5">Login</h2>

            <div class="relative mb-4">
                <label class="leading-7 text-sm text-gray-400">Username</label>
                <Validation Validator="ValidationRule.IsNotEmpty">
                    <FieldBody>
                        <TextEdit Role="TextRole.Email" @bind-Text="Username" Class="@Username">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>

                    </FieldBody>
                </Validation>
            </div>
            
            <div class="relative mb-4">
                <label class="leading-7 text-sm text-gray-400">Password</label>
                <Validation Validator="ValidationRule.IsNotEmpty">
                    <FieldBody>
                        <TextEdit Role="TextRole.Password" @bind-Text="Password" Class="@Username">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>

                    </FieldBody>
                </Validation>
            </div>


            <button class="text-white bg-indigo-500 border-0 py-2 px-8 focus:outline-none hover:bg-indigo-600 rounded text-lg" @onclick="Login">Login</button>
            <p class="text-xs mt-3">Sign up <Link href="/signup">Here</Link></p>
        </div>

    </div>
</div>

@code {
    public string? Username { get; set; }
    public string? Password { get; set; }

    public bool FailedLogin { get; set; } = false;

    public string FocusClass => $"w-full {(FailedLogin ? "dark:border-red-500 dark:focus:border-red-700 dark:focus:ring-red-500" : "dark:focus:border-blue-600 dark:focus:ring-blue-600")}";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var currentUser = await CurrentSession.GetUser();
            if(currentUser != null)
            {
                NavigationManager.NavigateTo("/");
            }
        }
    }

    public async void Login()
    {
        var user = await RezApi.DbManager.User.Login(Username,Password);
        if(user != null)
        {
            //todo: Make session lifetime configurable
            await CookieService.SetCookie(RezApi.Jwt.Generate(user));
            NavigationManager.NavigateTo("/pageAnalytic");
        }
        else
        {
            FailedLogin = true;
            await InvokeAsync(StateHasChanged);
        }
    }

    public async void Signup()
    {
        NavigationManager.NavigateTo("/signup");
    }
}

@page "/account/password"
@using System.ComponentModel.DataAnnotations
@inject CurrentSession CurrentSession

<Breadcrumb>
    <BreadcrumbItem>
        <BreadcrumbLink To="/account">Account</BreadcrumbLink>
    </BreadcrumbItem>
    <BreadcrumbItem Active>
        <BreadcrumbLink To="#">Password</BreadcrumbLink>
    </BreadcrumbItem>
</Breadcrumb>

<Alert Color="Color.Success" Visible="_showSuccess">
    <AlertDescription>Update Success!</AlertDescription>
</Alert>

<Alert Color="Color.Danger" Visible="_showError">
    <AlertDescription>Please ensure both password matches</AlertDescription>
</Alert>

<DisplayGroup>
    <Validations Mode="ValidationMode.Auto" Model="_passwordUpdate">
        <div class="relative mb-4">
            <label class="leading-7 text-sm text-gray-400">New Password</label>
            <Validation>
                <FieldBody>
                    <TextEdit Role="TextRole.Password" @bind-Text="_passwordUpdate.Password" Class="@FieldClass">
                        <Feedback>
                            <ValidationError/>
                        </Feedback>
                    </TextEdit>

                </FieldBody>
            </Validation>
        </div>

        <div class="relative mb-4">
            <label class="leading-7 text-sm text-gray-400">Repeat New Password</label>
            <Validation>
                <FieldBody>
                    <TextEdit Role="TextRole.Password" @bind-Text="_passwordUpdate.PasswordConfirm" Class="@FieldClass">
                        <Feedback>
                            <ValidationError/>
                        </Feedback>
                    </TextEdit>

                </FieldBody>
            </Validation>
        </div>
    </Validations>
    
    @if(!_loading)
    {
        <button class="text-white bg-indigo-500 border-0 py-2 px-8 focus:outline-none hover:bg-indigo-600 rounded text-lg" @onclick="Update">Update</button>
    }
    
</DisplayGroup>

@code
{
    private string FieldClass => "w-full bg-gray-600 bg-opacity-20 focus:bg-transparent focus:ring-2 focus:ring-indigo-900 rounded border border-gray-600 focus:border-indigo-500 text-base outline-none text-gray-100 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out";
    private PasswordUpdate _passwordUpdate = new PasswordUpdate();
    private User? _user = null!;

    private bool _loading = false;
    private bool _showSuccess = false;
    private bool _showError = false;

    protected override async Task OnInitializedAsync()
    {
        _user = await CurrentSession.GetUser();
    }

    public async void Update()
    {
        _loading = true;
        _showSuccess = false;
        _showError = false;
        StateHasChanged();
        if(_passwordUpdate.Password != _passwordUpdate.PasswordConfirm)
        {
            _showError = true;
            _loading = false;
            StateHasChanged();
            return;
        }
        _user?.UpdatePassword(_passwordUpdate.Password);
        await RezApi.Users.UpdatePassword(_user);
        _showSuccess = true;
        _loading = false;
        StateHasChanged();
    }

    public class PasswordUpdate
    {
        [Required(ErrorMessage = "Password is required")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Required(ErrorMessage = "Confirm Password is required")]
        [DataType(DataType.Password)]
        [Compare("Password")]
        public string PasswordConfirm { get; set; } = "";
    }
}

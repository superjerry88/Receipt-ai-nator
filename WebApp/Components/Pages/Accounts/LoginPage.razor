@page "/login"
@layout EmptyLayout
@inject CurrentSession CurrentSession
@inject CookieService CookieService
@inject NavigationManager NavigationManager

<h3>LoginPage</h3>

@* Invisible Alerts *@
@if(FailedLogin)
{
    <Alert Color="Color.Danger" Visible>
        <AlertMessage>Error!</AlertMessage>
        <AlertDescription>Incorrect Credentials</AlertDescription>
    </Alert>
}

@* Input fields  *@
<div>
    <Field>
        <FieldLabel>Username</FieldLabel>
        <TextEdit @bind-Text="Username">
        </TextEdit>
    </Field>

    <Field>
        <FieldLabel>Password</FieldLabel>
        <TextEdit Role="TextRole.Password" @bind-Text="Password">
        </TextEdit>
    </Field>
    
    <Button Clicked="Login">
        Login
    </Button>
    
    <Button Clicked="Signup">
        Signup
    </Button>
</div>

@code {
    public string? Username { get; set; }
    public string? Password { get; set; }

    public bool FailedLogin { get; set; } = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var currentUser = await CurrentSession.GetUser();
            if(currentUser != null)
            {
                NavigationManager.NavigateTo("/welcome");
            }
        }
    }

    public async void Login()
    {
        var user = await RezApi.DbManager.Get<DbUser>().Login(Username,Password);
        if(user != null)
        {
            //todo: Make session lifetime configurable
            await CookieService.SetCookie(RezApi.JwtHelper.Generate(user));
            NavigationManager.NavigateTo("/welcome");
        }
        else
        {
            FailedLogin = true;
            await InvokeAsync(StateHasChanged);
        }
    }

    public async void Signup()
    {
        NavigationManager.NavigateTo("/signup");
    }

}

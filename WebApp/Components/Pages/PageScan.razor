@page "/PageScan"

@inject CurrentSession CurrentSession
@inject NavigationManager NavigationManager

@if (_copyStatus is { IsSuccess: false })
{
    <Alert Color="Color.Danger" Visible>
        <AlertMessage>Error Copying</AlertMessage>
        <AlertDescription>@_copyStatus.Message</AlertDescription>
    </Alert>
}

@if (_processStatus is { IsSuccess: false })
{
    <Alert Color="Color.Danger" Visible>
        <AlertMessage>Error Processing</AlertMessage>
        <AlertDescription>@_processStatus.Message</AlertDescription>
    </Alert>
}

@if (_imageInfo == null)
{
    <InputFile accept="image/*" OnChange="HandleImageCapture" />
}

@if (_imageInfo != null && _imageInfo.IsImage)
{
    <img src="@_imageInfo.UrlPath" alt="Preview" style="max-width: 100%; max-height: 800px;" />
    @if (RezApi.Settings.UseMock)
    {
        <Alert Color="Color.Success" Visible>
            <AlertMessage>MOCK MODE </AlertMessage>
            <AlertDescription>You are using Mock, dummy data will be presented</AlertDescription>
        </Alert>
    }
    else
    {
        <Alert Color="Color.Danger" Visible>
            <AlertMessage>Warning</AlertMessage>
            <AlertDescription>YOU ARE NOT USING MOCK</AlertDescription>
        </Alert>
    }
    
    <button @onclick="Cancel">Cancel</button>
    <button @onclick="Submit">Submit</button>
}

@code {
    private ImageInfo? _imageInfo = null;
    private ImageInfoStatus? _copyStatus = null;
    private ImageInfoStatus? _processStatus = null;

    private async Task HandleImageCapture(InputFileChangeEventArgs e)
    {
        var user = await CurrentSession.GetUser();
        var imageFiles = e.GetMultipleFiles(1);
        if (imageFiles.Count > 0)
        {
            var imageFile = imageFiles[0];
            _imageInfo = new ImageInfo(imageFile)
            {
                    UserId = user?.Id ?? "",
            };
            _copyStatus = await _imageInfo.CopyToLocalPath(imageFile);
            _processStatus =  _imageInfo.ProcessImage();

            if(_copyStatus.IsSuccess && _processStatus.IsSuccess)
            {
                // Do something with the image
            }
            else
            {
                Cancel();
            }
            
        }
    }

    private void Cancel()
    {
        _imageInfo = null;
    }

    private async void Submit()
    {
        try
        {
            if(_imageInfo == null)
            {
                return;
            }


            ScanTask scanTask;
            @if (RezApi.Settings.UseMock)
            {
                scanTask = await RezApi.Jobs.GetTestClient();
                scanTask.DoJob(_imageInfo);
            }
            else
            {
                Console.WriteLine("[WARNING] YOU ARE NOT USING MOCK [WARNING]");
                //todo Use User's API Key if valid here
                scanTask = await RezApi.Jobs.GetGptClient();
                scanTask.DoJob(_imageInfo);
            }
            
            NavigationManager.NavigateTo($"/Reports/{scanTask.Id}");
            Console.WriteLine($"Client Done. Status: {scanTask.IsCompleted}. Time Taken: {scanTask.TimeTaken.TotalMilliseconds} ms");
            Console.WriteLine(scanTask.IsCompleted);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
        // Handle the submit action (e.g., upload the image to a server)
    }
}

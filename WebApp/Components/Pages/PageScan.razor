@page "/PageScan"

@inject CurrentSession CurrentSession
@inject NavigationManager NavigationManager

@if (_copyStatus is { IsSuccess: false })
{
    <Alert Color="Color.Danger" Visible>
        <AlertMessage>Error Copying</AlertMessage>
        <AlertDescription>@_copyStatus.Message</AlertDescription>
    </Alert>
}

@if (_processStatus is { IsSuccess: false })
{
    <Alert Color="Color.Danger" Visible>
        <AlertMessage>Error Processing</AlertMessage>
        <AlertDescription>@_processStatus.Message</AlertDescription>
    </Alert>
}

@if (_imageInfo == null && !isUserBroke)
{
    <Alert Color="Color.Dark" Visible>
        <AlertDescription>Please select your receipt image</AlertDescription>
    </Alert>
    <div class="flex justify-center items-center">
        <InputFile accept="image/*" OnChange="HandleImageCapture" />
    </div>
}
else if (_imageInfo == null && isUserBroke)
{
    <Alert Color="Color.Warning" Visible>
        <AlertDescription>Insufficient credit</AlertDescription>
    </Alert>
}


@if (_imageInfo is { IsImage: true })
{
    @if (RezApi.Settings.UseMock)
    {
        <Alert Color="Color.Success" Visible>
            <AlertDescription>You are using Mock, dummy data will be presented</AlertDescription>
        </Alert>
    }
    else
    {
        <Alert Color="Color.Dark" Visible>
            <AlertDescription>Please confirm your image</AlertDescription>
        </Alert>
    }

    <div class="flex justify-center items-center pb-3">
        <img src="@_imageInfo.UrlPath" alt="Preview" style="max-width: 100%; max-height: 800px;"/>
    </div>
    
    

    <div class="flex justify-center items-center">
        <button @onclick="Cancel" type="button" class="py-2.5 px-5 me-2 mb-2 text-sm font-medium text-gray-900 focus:outline-none bg-white rounded-lg border border-gray-200 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-4 focus:ring-gray-100 dark:focus:ring-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700">
            Cancel
        </button>
        <button @onclick="Submit" type="button" class="text-white bg-gradient-to-r from-cyan-500 to-green-500 hover:bg-gradient-to-bl focus:ring-4 focus:outline-none focus:ring-cyan-300 dark:focus:ring-cyan-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center me-2 mb-2">
            Confirm
        </button>
    </div>
}

@code {
    private ImageInfo? _imageInfo = null;
    private ImageInfoStatus? _copyStatus = null;
    private ImageInfoStatus? _processStatus = null;

    private bool isUserBroke = true;

    protected override async Task OnInitializedAsync()
    {
        var user = await CurrentSession.GetUser();
        if(user != null)
        {
            isUserBroke = user is { HasOpenAiKey: false, FreeTokenBalance: <= 0 };
        }
    }

    private async Task HandleImageCapture(InputFileChangeEventArgs e)
    {
        var user = await CurrentSession.GetUser();
        var imageFiles = e.GetMultipleFiles(1);
        if (imageFiles.Count > 0)
        {
            var imageFile = imageFiles[0];
            _imageInfo = new ImageInfo(imageFile)
            {
                    UserId = user?.Id ?? "",
            };
            _copyStatus = await _imageInfo.CopyToLocalPath(imageFile);
            _processStatus =  _imageInfo.ProcessImage();

            if(_copyStatus.IsSuccess && _processStatus.IsSuccess)
            {
                // Do something with the image
            }
            else
            {
                Cancel();
            }
            
        }
    }

    private void Cancel()
    {
        _imageInfo = null;
    }

    private async void Submit()
    {
        try
        {
            if(_imageInfo == null)
            {
                return;
            }


            ScanTask scanTask;
            @if (RezApi.Settings.UseMock)
            {
                scanTask = await RezApi.Jobs.GetTestClient();
                scanTask.DoJob(_imageInfo);
            }
            else
            {
                Console.WriteLine("[WARNING] YOU ARE NOT USING MOCK [WARNING]");
                //todo Use User's API Key if valid here
                scanTask = await RezApi.Jobs.GetGptClient();
                scanTask.DoJob(_imageInfo);
            }
            
            NavigationManager.NavigateTo($"/Reports/{scanTask.Id}");
            Console.WriteLine($"Client Done. Status: {scanTask.IsCompleted}. Time Taken: {scanTask.TimeTaken.TotalMilliseconds} ms");
            Console.WriteLine(scanTask.IsCompleted);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
        // Handle the submit action (e.g., upload the image to a server)
    }
}
